####################################################################################
#
#    This file will define the following variables:
#      - @PROJECT_NAME@_ENTIRE_LIBS      : Full list of libraries in @PROJECT_NAME@
#      - @PROJECT_NAME@_ENTIRE_LIBRARIES : Full list of libraries in @PROJECT_NAME@
#      - @PROJECT_NAME@_LIBS             : The list of libraries to link against.
#      - @PROJECT_NAME@_LIBRARIES        : The list of libraries to link against.
#      - @PROJECT_NAME@_INCLUDE_DIRS     : The @PROJECT_NAME@ include directories.
#      - @PROJECT_NAME@_LIBRARY_DIRS     : The @PROJECT_NAME@ library directories.
#      - @PROJECT_NAME@_BIN_DIRS         : The @PROJECT_NAME@ binary directories.
#      - @PROJECT_NAME@_SHARED           : If true, @PROJECT_NAME@ is a shared library.
#
####################################################################################

# Set the version number
set(@PROJECT_NAME@_VERSION "@PROJECT_VERSION@")

@PACKAGE_INIT@

# If true, it is a shared library
set(@PROJECT_NAME@_SHARED @BUILD_SHARED_LIBS@)
# binary directory location
list(APPEND @PROJECT_NAME@_BIN_DIRS "${PACKAGE_PREFIX_DIR}/bin")

set(_project_FIND_PARTS_REQUIRED)
if (@PROJECT_NAME@_FIND_REQUIRED)
    set(_project_FIND_PARTS_REQUIRED REQUIRED)
endif ()
set(_project_FIND_PARTS_QUIET)
if (@PROJECT_NAME@_FIND_QUIETLY)
    set(_project_FIND_PARTS_QUIET QUIET)
endif ()

get_filename_component(_project_install_prefix "${PACKAGE_PREFIX_DIR}" ABSOLUTE)

# Let components find each other, but don't overwrite CMAKE_PREFIX_PATH
set(_project_CMAKE_PREFIX_PATH_old "${CMAKE_PREFIX_PATH}")
set_and_check(CMAKE_PREFIX_PATH "${_project_install_prefix}")

foreach (module ${@PROJECT_NAME@_FIND_COMPONENTS})
    find_package(@PROJECT_NAME@-${module}
                 ${_project_FIND_PARTS_QUIET}
                 ${_project_FIND_PARTS_REQUIRED}
                 PATHS "${_project_install_prefix}" NO_DEFAULT_PATH)

    if (NOT @PROJECT_NAME@-${module}_FOUND)
        if (@PROJECT_NAME@_FIND_REQUIRED_${module})
            set_and_check(@PROJECT_NAME@-${module}_CONFIG_PATH "${_project_install_prefix}/lib@LIB_SUFFIX@/cmake/@PROJECT_NAME@-${module}/@PROJECT_NAME@-${module}-config.cmake")
            set(_project_NOTFOUND_MESSAGE "${_project_NOTFOUND_MESSAGE}Failed to load @PROJECT_NAME@ component \"${module}\", config file \"${@PROJECT_NAME@-${module}_CONFIG_PATH}\"\n")
            unset(@PROJECT_NAME@-${module}_CONFIG_PATH)
        elseif (NOT @PROJECT_NAME@_FIND_QUIETLY)
            set(@PROJECT_NAME@-${module}_CONFIG_PATH "${_project_install_prefix}/lib@LIB_SUFFIX@/cmake/@PROJECT_NAME@-${module}/@PROJECT_NAME@-${module}-config.cmake")
            if (NOT EXISTS "${@PROJECT_NAME@-${module}_CONFIG_PATH}")
                message(WARNING "Failed to find @PROJECT_NAME@ component \"${module}\" config file at \"${@PROJECT_NAME@-${module}_CONFIG_PATH}\"")
            else ()
                message(WARNING "Failed to load @PROJECT_NAME@ component \"${module}\", config file \"${@PROJECT_NAME@-${module}_CONFIG_PATH}\"")
            endif ()
            unset(@PROJECT_NAME@-${module}_CONFIG_PATH)
        endif ()
    else ()
        # Add the include's directories of the component to @PROJECT_NAME@_INCLUDE_DIRS
        get_target_property(__${module}_included_dirs @PROJECT_NAME@-${module} INTERFACE_INCLUDE_DIRECTORIES)
        # Append value in @PROJECT_NAME@_INCLUDE_DIRS
        list(APPEND @PROJECT_NAME@_INCLUDE_DIRS "${__${module}_included_dirs}")
        # Delete duplicate directories
        list(REMOVE_DUPLICATES "@PROJECT_NAME@_INCLUDE_DIRS")
        unset(__${module}_included_dirs)
    endif ()

    # For backward compatibility set the LIBRARIES variable
    list(APPEND @PROJECT_NAME@_LIBRARIES "@PROJECT_NAME@::${module}")
    list(APPEND @PROJECT_NAME@_LIBS "@PROJECT_NAME@::${module}")
endforeach ()

# The default value, the directory is also included when no components are added
list(APPEND @PROJECT_NAME@_INCLUDE_DIRS "${_project_install_prefix}/include")
# Delete duplicate directories
list(REMOVE_DUPLICATES "@PROJECT_NAME@_INCLUDE_DIRS")

# Define @PROJECT_NAME@_ENTIRE_LIBS and @PROJECT_NAME@_ENTIRE_LIBRARIES
set(@PROJECT_NAME@_ENTIRE_LIBS "@__ENTIRE_LIBRARIES@")
set(@PROJECT_NAME@_ENTIRE_LIBRARIES "@__ENTIRE_LIBRARIES@")

# Define @PROJECT NAME@_LIBRARY_DIRS variable
list(APPEND @PROJECT_NAME@_LIBRARY_DIRS "${_project_install_prefix}/lib@LIB_SUFFIX@")
# Delete duplicate directories
list(REMOVE_DUPLICATES "@PROJECT_NAME@_LIBRARY_DIRS")

# Restore the original CMAKE_PREFIX_PATH value
set(CMAKE_PREFIX_PATH "${_project_CMAKE_PREFIX_PATH_old}")

if (_project_NOTFOUND_MESSAGE)
    set(@PROJECT_NAME@_NOT_FOUND_MESSAGE "${_project_NOTFOUND_MESSAGE}")
    message(${@PROJECT_NAME@_NOT_FOUND_MESSAGE})
    set(@PROJECT_NAME@_FOUND False)
endif ()

set_and_check(@PROJECT_NAME@_INSTALL_PREFIX "${_project_install_prefix}")

check_required_components("")

# Show success message
if (NOT _project_NOTFOUND_MESSAGE)
    message(STATUS "Found @PROJECT_NAME@: ${CMAKE_CURRENT_LIST_FILE} (found version \"@PROJECT_VERSION@\")")
endif ()

# Clear all temporary variables
unset(_project_FIND_PARTS_REQUIRED)
unset(_project_FIND_PARTS_QUIET)
unset(_project_install_prefix)
unset(_project_CMAKE_PREFIX_PATH_old)
unset(_project_NOTFOUND_MESSAGE)

if (NOT @PROJECT_NAME@_FOUND)
    unset(@PROJECT_NAME@_ENTIRE_LIBS)
    unset(@PROJECT_NAME@_ENTIRE_LIBRARIES)
    unset(@PROJECT_NAME@_LIBS)
    unset(@PROJECT_NAME@_LIBRARIES)
    unset(@PROJECT_NAME@_INCLUDE_DIRS)
    unset(@PROJECT_NAME@_LIBRARY_DIRS)
    unset(@PROJECT_NAME@_BIN_DIRS)
    unset(@PROJECT_NAME@_SHARED)
endif ()
